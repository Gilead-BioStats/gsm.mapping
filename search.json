[{"path":"https://gilead-biostats.github.io/gsm.mapping/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeremy Wildfire. Author, maintainer. Laura Maxwell. Author. Zelos Zhu. Author. Gilead Sciences. Copyright holder.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wildfire J, Maxwell L, Zhu Z (2025). gsm.mapping: Good Statistical Monitoring Mapping. R package version 0.0.1, https://gilead-biostats.github.io/gsm.mapping, https://github.com/Gilead-BioStats/gsm.mapping.","code":"@Manual{,   title = {gsm.mapping: Good Statistical Monitoring Mapping},   author = {Jeremy Wildfire and Laura Maxwell and Zelos Zhu},   year = {2025},   note = {R package version 0.0.1, https://gilead-biostats.github.io/gsm.mapping},   url = {https://github.com/Gilead-BioStats/gsm.mapping}, }"},{"path":"https://gilead-biostats.github.io/gsm.mapping/index.html","id":"gsmmapping","dir":"","previous_headings":"","what":"Good Statistical Monitoring Mapping","title":"Good Statistical Monitoring Mapping","text":"Data mapping framework {gsm}","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/ApplySpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Data Specification — ApplySpec","title":"Apply Data Specification — ApplySpec","text":"Apply column specification data frame. column specification named list names target column names values lists column specifications. column specifications can include: type: data type convert column . source_col: name source column map target column.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/ApplySpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Data Specification — ApplySpec","text":"","code":"ApplySpec(dfSource, columnSpecs, domain)"},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/ApplySpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Data Specification — ApplySpec","text":"dfSource data.frame Data frame apply column specification . columnSpecs list Column specification. domain character Domain name.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/ApplySpec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Data Specification — ApplySpec","text":"data.frame dfSource column specification applied.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/CalculatePercentage.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to compile ","title":"Helper function to compile ","text":"Used create percentage values enrollment data, site activation participantment enrollment, pasting together appropriate n/N (xx.x%) value well.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/CalculatePercentage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to compile ","text":"","code":"CalculatePercentage(   data,   strCurrentCol,   strTargetCol,   strPercVal,   strPercStrVal )"},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/CalculatePercentage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to compile ","text":"data input dataframe strCurrentCol Column represents site count participant count strTargetCol Column represents target count site/participants strPercVal Name column contain numeric percentage value enrollment strPercStrVal Name column contain n/N (xx.x%) string","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/CalculatePercentage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to compile ","text":"data frame containing two additional columns precentage value associated string","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/CombineSpecs.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Multiple Specifications — CombineSpecs","title":"Combine Multiple Specifications — CombineSpecs","text":"function combines multiple domain specifications single specification list, ensuring deduplication columns, resolving conflicts required field, checking type mismatches.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/CombineSpecs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Multiple Specifications — CombineSpecs","text":"","code":"CombineSpecs(lSpecs, bIsWorkflow = TRUE)"},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/CombineSpecs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Multiple Specifications — CombineSpecs","text":"lSpecs list lists, sublist represents either gsm workflow spec object workflow bIsWorkflow lSpecs list workflows? , .$spec extracted. Default: TRUE","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/CombineSpecs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Multiple Specifications — CombineSpecs","text":"list representing combined specifications across domains.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/CombineSpecs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Multiple Specifications — CombineSpecs","text":"","code":"spec1 <- list(   df1 = list(     col1 = list(type = \"character\"),     col2 = list(type = \"character\")   ),   df2 = list(     col3 = list(type = \"character\"),     col4 = list(type = \"integer\")   ) )  spec2 <- list(   df1 = list(     col1 = list(type = \"character\"),     col5 = list(type = \"character\")   ),   df3 = list(     col6 = list(type = \"character\"),     col7 = list(type = \"character\")   ) )  combined <- CombineSpecs(list(spec1, spec2), bIsWorkflow = FALSE)  mappings <- gsm::MakeWorkflowList(strPath = \"workflow/1_mappings\") mapping_spec <- CombineSpecs(mappings)"},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/Ingest.html","id":null,"dir":"Reference","previous_headings":"","what":"Ingests data from a source based on a given specification. — Ingest","title":"Ingests data from a source based on a given specification. — Ingest","text":"function ingests data source based given specification. iterates domain specification checks columns exist source data. constructs query select columns source calls RunQuery function retrieve data. resulting data frames stored list, data frame corresponds domain specification.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/Ingest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ingests data from a source based on a given specification. — Ingest","text":"","code":"Ingest(lSourceData, lSpec, strDomain = \"Raw\")"},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/Ingest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ingests data from a source based on a given specification. — Ingest","text":"lSourceData list named list source data frames. lSpec list named list column specifications. strDomain character Domain name add data frames ingestions. Default: \"Raw\"","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/Ingest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ingests data from a source based on a given specification. — Ingest","text":"list named list data frames, data frame corresponds domain specification.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/Ingest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ingests data from a source based on a given specification. — Ingest","text":"","code":"lSourceData <- list(   Source_STUDY = clindata::ctms_study,   Source_SITE = clindata::ctms_site,   Source_SUBJ = clindata::rawplus_dm,   Source_AE = clindata::rawplus_ae,   Source_PD = clindata::ctms_protdev,   Source_LB = clindata::rawplus_lb,   Source_STUDCOMP = clindata::rawplus_studcomp,   Source_SDRGCOMP = clindata::rawplus_sdrgcomp,   Source_QUERY = clindata::edc_queries,   Source_DATAENT = clindata::edc_data_pages,   Source_DATACHG = clindata::edc_data_points,   Source_ENROLL = clindata::rawplus_enroll )  lIngestWorkflow <- gsm::MakeWorkflowList(strPath = \"workflow/1_mappings\")[[1]] lRawData <- Ingest(lSourceData, lIngestWorkflow$spec) #> Error in stop_if(!is.list(lSourceData), \"[ lSourceData ] must be a list.\"): could not find function \"stop_if\""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/MakeLongMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to compile ","title":"Helper function to compile ","text":"Used create components group metadata dictionary (dfGroups) use charts reports. function takes data frame string specifying group columns, returns long format data frame.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/MakeLongMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to compile ","text":"","code":"MakeLongMeta(data, strGroupLevel, strGroupCols = \"GroupID\")"},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/MakeLongMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to compile ","text":"data input data frame. strGroupLevel string specifying group type. strGroupCols string specifying group columns.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/MakeLongMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to compile ","text":"long format data frame.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/MakeLongMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to compile ","text":"","code":"df <- data.frame(GroupID = c(1, 2, 3), Param1 = c(10, 20, 30), Param2 = c(100, 200, 300)) MakeLongMeta(df, \"GroupID\") #> Error in stop_if(!all(strGroupCols %in% names(data)), \"strGroupCols not found in data\"): could not find function \"stop_if\""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/RunQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a SQL query on a data frame or DuckDB table — RunQuery","title":"Run a SQL query on a data frame or DuckDB table — RunQuery","text":"RunQuery executes SQL query data frame DuckDB lazy table, allowing dynamic use local database-backed data. DuckDB connection passed df, operates existing connection. Otherwise, creates temporary DuckDB table provided data frame SQL processing. SQL query include placeholder df indicate primary data source (df) referenced.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/RunQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a SQL query on a data frame or DuckDB table — RunQuery","text":"","code":"RunQuery(strQuery, df, bUseSchema = FALSE, lColumnMapping = NULL)"},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/RunQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a SQL query on a data frame or DuckDB table — RunQuery","text":"strQuery character SQL query run, containing placeholders \"df\". df data.frame tbl_dbi data frame DuckDB lazy table use SQL query. bUseSchema boolean use schema enforce data types. Defaults FALSE. lColumnMapping list namesd list column specifications single data.frame. Required bUseSchema TRUE.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/RunQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a SQL query on a data frame or DuckDB table — RunQuery","text":"data.frame containing results SQL query.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/RunQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a SQL query on a data frame or DuckDB table — RunQuery","text":"","code":"df <- data.frame(   Name = c(\"John\", \"Jane\", \"Bob\"),   Age = c(25, 30, 35),   Salary = c(50000, 60000, 70000) ) query <- \"SELECT * FROM df WHERE AGE > 30\"  result <- RunQuery(query, df) #> Error in stop_if(cnd = !is.character(strQuery), message = \"strQuery must be a query\"): could not find function \"stop_if\""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/combine_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Domain Specifications — combine_domain","title":"Combine Domain Specifications — combine_domain","text":"function combines multiple column specifications single domain applying deduplication resolving conflicts.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/combine_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Domain Specifications — combine_domain","text":"","code":"combine_domain(domain_specs)"},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/combine_domain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Domain Specifications — combine_domain","text":"domain_specs list lists, sublist represents specifications domain across multiple specs.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/combine_domain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Domain Specifications — combine_domain","text":"list representing combined specifications domain.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/gsm.mapping-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gsm.mapping: Good Statistical Monitoring Mapping — gsm.mapping-package","title":"gsm.mapping: Good Statistical Monitoring Mapping — gsm.mapping-package","text":"Good Statistical Monitoring 'gsm' R package provides framework statistical data monitoring. 'gsm.mapping' handles mapping aspects gsm framework.","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/gsm.mapping-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gsm.mapping: Good Statistical Monitoring Mapping — gsm.mapping-package","text":"Maintainer: Jeremy Wildfire jwildfire@gmail.com Authors: Laura Maxwell laura.maxwell@atorusresearch.com Zelos Zhu zelos.zhu@atorusresearch.com contributors: Gilead Sciences [copyright holder]","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/update_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Column Specification — update_column","title":"Update Column Specification — update_column","text":"function updates column specification handling deduplication, resolving conflicts required field, checking type mismatches.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/update_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Column Specification — update_column","text":"","code":"update_column(existing_col, new_col, col_name)"},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/update_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Column Specification — update_column","text":"existing_col list representing existing column specification (can NULL column yet exist). new_col list representing new column specification merged existing one.","code":""},{"path":"https://gilead-biostats.github.io/gsm.mapping/reference/update_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Column Specification — update_column","text":"list containing updated column specification.","code":""}]
